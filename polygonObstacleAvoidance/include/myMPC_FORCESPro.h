/*
myMPC_FORCESPro : A fast customized optimization solver.

Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCESPRO v4.2.1 on Friday, April 30, 2021 at 1:07:21 PM */
#ifndef myMPC_FORCESPro_H
#define myMPC_FORCESPro_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif


#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double myMPC_FORCESPro_float;


typedef double myMPC_FORCESProinterface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_myMPC_FORCESPro
#define MISRA_C_myMPC_FORCESPro (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_myMPC_FORCESPro
#define RESTRICT_CODE_myMPC_FORCESPro (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_myMPC_FORCESPro
#define SET_PRINTLEVEL_myMPC_FORCESPro    (0)
#endif

/* timing */
#ifndef SET_TIMING_myMPC_FORCESPro
#define SET_TIMING_myMPC_FORCESPro    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_myMPC_FORCESPro         (200)	

/* scaling factor of line search (affine direction) */
#define SET_LS_SCALE_AFF_myMPC_FORCESPro  (myMPC_FORCESPro_float)(0.9)      

/* scaling factor of line search (combined direction) */
#define SET_LS_SCALE_myMPC_FORCESPro      (myMPC_FORCESPro_float)(0.95)  

/* minimum required step size in each iteration */
#define SET_LS_MINSTEP_myMPC_FORCESPro    (myMPC_FORCESPro_float)(1E-08)

/* maximum step size (combined direction) */
#define SET_LS_MAXSTEP_myMPC_FORCESPro    (myMPC_FORCESPro_float)(0.995)

/* desired relative duality gap */
#define SET_ACC_RDGAP_myMPC_FORCESPro     (myMPC_FORCESPro_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_myMPC_FORCESPro     (myMPC_FORCESPro_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_myMPC_FORCESPro   (myMPC_FORCESPro_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_myMPC_FORCESPro  (myMPC_FORCESPro_float)(1E-06)

/* desired maximum violation of stationarity (only checked if value is > 0) */
#define SET_ACC_KKTSTAT_myMPC_FORCESPro  (myMPC_FORCESPro_float)(-1)

/* RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_myMPC_FORCESPro      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_myMPC_FORCESPro (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_myMPC_FORCESPro   (2)

/* no progress in line search possible */
#define NOPROGRESS_myMPC_FORCESPro   (-7)

/* fatal internal error - nans occurring */
#define NAN_myMPC_FORCESPro  (-10)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_myMPC_FORCESPro   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_myMPC_FORCESPro   (-12)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_myMPC_FORCESPro  (-100)


/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct myMPC_FORCESPro_params
{
    /* vector of size 7680 */
    myMPC_FORCESPro_float A[7680];

    /* vector of size 1280 */
    myMPC_FORCESPro_float b[1280];

    /* vector of size 160 */
    myMPC_FORCESPro_float c[160];

    /* matrix of size [6 x 6] (column major format) */
    myMPC_FORCESPro_float H_N[36];

} myMPC_FORCESPro_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct myMPC_FORCESPro_output
{
    /* vector of size 6 */
    myMPC_FORCESPro_float zout01[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout02[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout03[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout04[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout05[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout06[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout07[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout08[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout09[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout10[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout11[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout12[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout13[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout14[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout15[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout16[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout17[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout18[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout19[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout20[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout21[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout22[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout23[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout24[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout25[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout26[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout27[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout28[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout29[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout30[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout31[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout32[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout33[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout34[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout35[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout36[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout37[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout38[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout39[6];

    /* vector of size 6 */
    myMPC_FORCESPro_float zout40[6];

} myMPC_FORCESPro_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct myMPC_FORCESPro_info
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    myMPC_FORCESPro_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    myMPC_FORCESPro_float res_ineq;

    /* primal objective */
    myMPC_FORCESPro_float pobj;	
	
    /* dual objective */
    myMPC_FORCESPro_float dobj;	

    /* duality gap := pobj - dobj */
    myMPC_FORCESPro_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    myMPC_FORCESPro_float rdgap;		

	/* infinity norm of gradient of Lagrangian*/
	myMPC_FORCESPro_float gradient_lag_norm;

    /* duality measure */
    myMPC_FORCESPro_float mu;

	/* duality measure (after affine step) */
    myMPC_FORCESPro_float mu_aff;
	
    /* centering parameter */
    myMPC_FORCESPro_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    myMPC_FORCESPro_float step_aff;
    
    /* step size (combined direction) */
    myMPC_FORCESPro_float step_cc;    

	/* solvertime */
	myMPC_FORCESPro_float solvetime;   

} myMPC_FORCESPro_info;









/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Friday, April 30, 2021 1:07:22 PM */
/* User License expires on: (UTC) Saturday, July 17, 2021 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Saturday, July 17, 2021 10:00:00 PM (approx.) */
/* Solver Generation Request Id: 4dfeb9a8-eaaa-4bf2-95f8-485554cbaeb9 */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif
extern solver_int32_default myMPC_FORCESPro_solve(myMPC_FORCESPro_params *params, myMPC_FORCESPro_output *output, myMPC_FORCESPro_info *info, FILE *fs);


#ifdef __cplusplus
}
#endif

#endif
