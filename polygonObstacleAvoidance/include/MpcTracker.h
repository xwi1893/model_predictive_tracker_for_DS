/*
MpcTracker : A fast customized optimization solver.

Copyright (C) 2013-2021 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCESPRO v4.2.0 on Thursday, March 11, 2021 at 6:29:35 AM */
#ifndef MpcTracker_H
#define MpcTracker_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif


#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double MpcTracker_float;


typedef double MpcTrackerinterface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_MpcTracker
#define MISRA_C_MpcTracker (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_MpcTracker
#define RESTRICT_CODE_MpcTracker (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_MpcTracker
#define SET_PRINTLEVEL_MpcTracker    (0)
#endif

/* timing */
#ifndef SET_TIMING_MpcTracker
#define SET_TIMING_MpcTracker    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_MpcTracker         (200)	

/* scaling factor of line search (affine direction) */
#define SET_LS_SCALE_AFF_MpcTracker  (MpcTracker_float)(0.9)      

/* scaling factor of line search (combined direction) */
#define SET_LS_SCALE_MpcTracker      (MpcTracker_float)(0.95)  

/* minimum required step size in each iteration */
#define SET_LS_MINSTEP_MpcTracker    (MpcTracker_float)(1E-08)

/* maximum step size (combined direction) */
#define SET_LS_MAXSTEP_MpcTracker    (MpcTracker_float)(0.995)

/* desired relative duality gap */
#define SET_ACC_RDGAP_MpcTracker     (MpcTracker_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_MpcTracker     (MpcTracker_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_MpcTracker   (MpcTracker_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_MpcTracker  (MpcTracker_float)(1E-06)

/* desired maximum violation of stationarity (only checked if value is > 0) */
#define SET_ACC_KKTSTAT_MpcTracker  (MpcTracker_float)(-1)

/* RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_MpcTracker      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_MpcTracker (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_MpcTracker   (2)

/* no progress in line search possible */
#define NOPROGRESS_MpcTracker   (-7)

/* fatal internal error - nans occurring */
#define NAN_MpcTracker  (-10)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_MpcTracker   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_MpcTracker   (-12)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_MpcTracker  (-100)


/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct MpcTracker_params
{
    /* matrix of size [6 x 6] (column major format) */
    MpcTracker_float H[36];

    /* vector of size 180 */
    MpcTracker_float Reference_Value[180];

    /* vector of size 150 */
    MpcTracker_float c[150];

} MpcTracker_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct MpcTracker_output
{
    /* vector of size 1 */
    MpcTracker_float u0[1];

} MpcTracker_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct MpcTracker_info
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    MpcTracker_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    MpcTracker_float res_ineq;

    /* primal objective */
    MpcTracker_float pobj;	
	
    /* dual objective */
    MpcTracker_float dobj;	

    /* duality gap := pobj - dobj */
    MpcTracker_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    MpcTracker_float rdgap;		

	/* infinity norm of gradient of Lagrangian*/
	MpcTracker_float gradient_lag_norm;

    /* duality measure */
    MpcTracker_float mu;

	/* duality measure (after affine step) */
    MpcTracker_float mu_aff;
	
    /* centering parameter */
    MpcTracker_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    MpcTracker_float step_aff;
    
    /* step size (combined direction) */
    MpcTracker_float step_cc;    

	/* solvertime */
	MpcTracker_float solvetime;   

} MpcTracker_info;









/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Thursday, March 11, 2021 6:29:36 AM */
/* User License expires on: (UTC) Saturday, July 17, 2021 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Saturday, July 17, 2021 10:00:00 PM (approx.) */
/* Solver Generation Request Id: 7062ff0b-2a33-439f-b023-f73951097990 */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif
extern solver_int32_default MpcTracker_solve(MpcTracker_params *params, MpcTracker_output *output, MpcTracker_info *info, FILE *fs);


#ifdef __cplusplus
}
#endif

#endif
